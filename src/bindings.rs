/* automatically generated by rust-bindgen 0.59.1 */

pub type __int64_t = ::std::os::raw::c_longlong;
pub type __darwin_size_t = ::std::os::raw::c_ulong;
pub type __darwin_off_t = __int64_t;
pub type size_t = __darwin_size_t;
pub type avro_allocator_t = ::std::option::Option<
    unsafe extern "C" fn(
        user_data: *mut ::std::os::raw::c_void,
        ptr: *mut ::std::os::raw::c_void,
        osize: size_t,
        nsize: size_t,
    ) -> *mut ::std::os::raw::c_void,
>;
extern "C" {
    pub fn avro_set_allocator(alloc: avro_allocator_t, user_data: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn avro_calloc(count: size_t, size: size_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn avro_str_alloc(str_size: size_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn avro_strdup(str_: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn avro_strndup(
        str_: *const ::std::os::raw::c_char,
        size: size_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn avro_str_free(str_: *mut ::std::os::raw::c_char);
}
pub const avro_type_t_AVRO_STRING: avro_type_t = 0;
pub const avro_type_t_AVRO_BYTES: avro_type_t = 1;
pub const avro_type_t_AVRO_INT32: avro_type_t = 2;
pub const avro_type_t_AVRO_INT64: avro_type_t = 3;
pub const avro_type_t_AVRO_FLOAT: avro_type_t = 4;
pub const avro_type_t_AVRO_DOUBLE: avro_type_t = 5;
pub const avro_type_t_AVRO_BOOLEAN: avro_type_t = 6;
pub const avro_type_t_AVRO_NULL: avro_type_t = 7;
pub const avro_type_t_AVRO_RECORD: avro_type_t = 8;
pub const avro_type_t_AVRO_ENUM: avro_type_t = 9;
pub const avro_type_t_AVRO_FIXED: avro_type_t = 10;
pub const avro_type_t_AVRO_MAP: avro_type_t = 11;
pub const avro_type_t_AVRO_ARRAY: avro_type_t = 12;
pub const avro_type_t_AVRO_UNION: avro_type_t = 13;
pub const avro_type_t_AVRO_LINK: avro_type_t = 14;
pub type avro_type_t = ::std::os::raw::c_uint;
pub const avro_class_t_AVRO_SCHEMA: avro_class_t = 0;
pub const avro_class_t_AVRO_DATUM: avro_class_t = 1;
pub type avro_class_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct avro_obj_t {
    pub type_: avro_type_t,
    pub class_type: avro_class_t,
    pub refcount: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_avro_obj_t() {
    assert_eq!(
        ::std::mem::size_of::<avro_obj_t>(),
        12usize,
        concat!("Size of: ", stringify!(avro_obj_t))
    );
    assert_eq!(
        ::std::mem::align_of::<avro_obj_t>(),
        4usize,
        concat!("Alignment of ", stringify!(avro_obj_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<avro_obj_t>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(avro_obj_t),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<avro_obj_t>())).class_type as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(avro_obj_t),
            "::",
            stringify!(class_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<avro_obj_t>())).refcount as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(avro_obj_t),
            "::",
            stringify!(refcount)
        )
    );
}
pub type fpos_t = __darwin_off_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sbuf {
    pub _base: *mut ::std::os::raw::c_uchar,
    pub _size: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___sbuf() {
    assert_eq!(
        ::std::mem::size_of::<__sbuf>(),
        16usize,
        concat!("Size of: ", stringify!(__sbuf))
    );
    assert_eq!(
        ::std::mem::align_of::<__sbuf>(),
        8usize,
        concat!("Alignment of ", stringify!(__sbuf))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sbuf>()))._base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__sbuf),
            "::",
            stringify!(_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sbuf>()))._size as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__sbuf),
            "::",
            stringify!(_size)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sFILEX {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sFILE {
    pub _p: *mut ::std::os::raw::c_uchar,
    pub _r: ::std::os::raw::c_int,
    pub _w: ::std::os::raw::c_int,
    pub _flags: ::std::os::raw::c_short,
    pub _file: ::std::os::raw::c_short,
    pub _bf: __sbuf,
    pub _lbfsize: ::std::os::raw::c_int,
    pub _cookie: *mut ::std::os::raw::c_void,
    pub _close: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
    >,
    pub _read: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: *mut ::std::os::raw::c_char,
            arg3: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub _seek: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: fpos_t,
            arg3: ::std::os::raw::c_int,
        ) -> fpos_t,
    >,
    pub _write: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: *const ::std::os::raw::c_char,
            arg3: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub _ub: __sbuf,
    pub _extra: *mut __sFILEX,
    pub _ur: ::std::os::raw::c_int,
    pub _ubuf: [::std::os::raw::c_uchar; 3usize],
    pub _nbuf: [::std::os::raw::c_uchar; 1usize],
    pub _lb: __sbuf,
    pub _blksize: ::std::os::raw::c_int,
    pub _offset: fpos_t,
}
#[test]
fn bindgen_test_layout___sFILE() {
    assert_eq!(
        ::std::mem::size_of::<__sFILE>(),
        152usize,
        concat!("Size of: ", stringify!(__sFILE))
    );
    assert_eq!(
        ::std::mem::align_of::<__sFILE>(),
        8usize,
        concat!("Alignment of ", stringify!(__sFILE))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._p as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_p)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._r as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_r)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._w as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_w)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._flags as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._file as *const _ as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_file)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._bf as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_bf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._lbfsize as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_lbfsize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._cookie as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_cookie)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._close as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_close)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._read as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_read)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._seek as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_seek)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._write as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_write)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._ub as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_ub)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._extra as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_extra)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._ur as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_ur)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._ubuf as *const _ as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_ubuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._nbuf as *const _ as usize },
        119usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_nbuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._lb as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_lb)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._blksize as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_blksize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._offset as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_offset)
        )
    );
}
pub type FILE = __sFILE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct avro_raw_array {
    pub element_size: size_t,
    pub element_count: size_t,
    pub allocated_size: size_t,
    pub data: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_avro_raw_array() {
    assert_eq!(
        ::std::mem::size_of::<avro_raw_array>(),
        32usize,
        concat!("Size of: ", stringify!(avro_raw_array))
    );
    assert_eq!(
        ::std::mem::align_of::<avro_raw_array>(),
        8usize,
        concat!("Alignment of ", stringify!(avro_raw_array))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<avro_raw_array>())).element_size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(avro_raw_array),
            "::",
            stringify!(element_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<avro_raw_array>())).element_count as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(avro_raw_array),
            "::",
            stringify!(element_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<avro_raw_array>())).allocated_size as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(avro_raw_array),
            "::",
            stringify!(allocated_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<avro_raw_array>())).data as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(avro_raw_array),
            "::",
            stringify!(data)
        )
    );
}
pub type avro_raw_array_t = avro_raw_array;
extern "C" {
    pub fn avro_raw_array_init(array: *mut avro_raw_array_t, element_size: size_t);
}
extern "C" {
    pub fn avro_raw_array_done(array: *mut avro_raw_array_t);
}
extern "C" {
    pub fn avro_raw_array_clear(array: *mut avro_raw_array_t);
}
extern "C" {
    pub fn avro_raw_array_ensure_size(
        array: *mut avro_raw_array_t,
        desired_count: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn avro_raw_array_ensure_size0(
        array: *mut avro_raw_array_t,
        desired_count: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn avro_raw_array_append(array: *mut avro_raw_array_t) -> *mut ::std::os::raw::c_void;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct avro_raw_map {
    pub elements: avro_raw_array_t,
    pub indices_by_key: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_avro_raw_map() {
    assert_eq!(
        ::std::mem::size_of::<avro_raw_map>(),
        40usize,
        concat!("Size of: ", stringify!(avro_raw_map))
    );
    assert_eq!(
        ::std::mem::align_of::<avro_raw_map>(),
        8usize,
        concat!("Alignment of ", stringify!(avro_raw_map))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<avro_raw_map>())).elements as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(avro_raw_map),
            "::",
            stringify!(elements)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<avro_raw_map>())).indices_by_key as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(avro_raw_map),
            "::",
            stringify!(indices_by_key)
        )
    );
}
pub type avro_raw_map_t = avro_raw_map;
extern "C" {
    pub fn avro_raw_map_init(map: *mut avro_raw_map_t, element_size: size_t);
}
extern "C" {
    pub fn avro_raw_map_done(map: *mut avro_raw_map_t);
}
extern "C" {
    pub fn avro_raw_map_clear(map: *mut avro_raw_map_t);
}
extern "C" {
    pub fn avro_raw_map_ensure_size(
        map: *mut avro_raw_map_t,
        desired_count: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn avro_raw_map_get(
        map: *const avro_raw_map_t,
        key: *const ::std::os::raw::c_char,
        index: *mut size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn avro_raw_map_get_or_create(
        map: *mut avro_raw_map_t,
        key: *const ::std::os::raw::c_char,
        element: *mut *mut ::std::os::raw::c_void,
        index: *mut size_t,
    ) -> ::std::os::raw::c_int;
}
pub type avro_wrapped_buffer_t = avro_wrapped_buffer;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct avro_wrapped_buffer {
    pub buf: *const ::std::os::raw::c_void,
    pub size: size_t,
    pub user_data: *mut ::std::os::raw::c_void,
    pub free: ::std::option::Option<unsafe extern "C" fn(self_: *mut avro_wrapped_buffer_t)>,
    pub copy: ::std::option::Option<
        unsafe extern "C" fn(
            dest: *mut avro_wrapped_buffer_t,
            src: *const avro_wrapped_buffer_t,
            offset: size_t,
            length: size_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub slice: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut avro_wrapped_buffer_t,
            offset: size_t,
            length: size_t,
        ) -> ::std::os::raw::c_int,
    >,
}
#[test]
fn bindgen_test_layout_avro_wrapped_buffer() {
    assert_eq!(
        ::std::mem::size_of::<avro_wrapped_buffer>(),
        48usize,
        concat!("Size of: ", stringify!(avro_wrapped_buffer))
    );
    assert_eq!(
        ::std::mem::align_of::<avro_wrapped_buffer>(),
        8usize,
        concat!("Alignment of ", stringify!(avro_wrapped_buffer))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<avro_wrapped_buffer>())).buf as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(avro_wrapped_buffer),
            "::",
            stringify!(buf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<avro_wrapped_buffer>())).size as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(avro_wrapped_buffer),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<avro_wrapped_buffer>())).user_data as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(avro_wrapped_buffer),
            "::",
            stringify!(user_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<avro_wrapped_buffer>())).free as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(avro_wrapped_buffer),
            "::",
            stringify!(free)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<avro_wrapped_buffer>())).copy as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(avro_wrapped_buffer),
            "::",
            stringify!(copy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<avro_wrapped_buffer>())).slice as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(avro_wrapped_buffer),
            "::",
            stringify!(slice)
        )
    );
}
extern "C" {
    pub fn avro_wrapped_buffer_move(
        dest: *mut avro_wrapped_buffer_t,
        src: *mut avro_wrapped_buffer_t,
    );
}
extern "C" {
    pub fn avro_wrapped_buffer_copy(
        dest: *mut avro_wrapped_buffer_t,
        src: *const avro_wrapped_buffer_t,
        offset: size_t,
        length: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn avro_wrapped_buffer_slice(
        self_: *mut avro_wrapped_buffer_t,
        offset: size_t,
        length: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn avro_wrapped_buffer_new(
        dest: *mut avro_wrapped_buffer_t,
        buf: *const ::std::os::raw::c_void,
        length: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn avro_wrapped_buffer_new_copy(
        dest: *mut avro_wrapped_buffer_t,
        buf: *const ::std::os::raw::c_void,
        length: size_t,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct avro_raw_string {
    pub wrapped: avro_wrapped_buffer_t,
}
#[test]
fn bindgen_test_layout_avro_raw_string() {
    assert_eq!(
        ::std::mem::size_of::<avro_raw_string>(),
        48usize,
        concat!("Size of: ", stringify!(avro_raw_string))
    );
    assert_eq!(
        ::std::mem::align_of::<avro_raw_string>(),
        8usize,
        concat!("Alignment of ", stringify!(avro_raw_string))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<avro_raw_string>())).wrapped as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(avro_raw_string),
            "::",
            stringify!(wrapped)
        )
    );
}
pub type avro_raw_string_t = avro_raw_string;
extern "C" {
    pub fn avro_raw_string_init(str_: *mut avro_raw_string_t);
}
extern "C" {
    pub fn avro_raw_string_done(str_: *mut avro_raw_string_t);
}
extern "C" {
    pub fn avro_raw_string_set_length(
        str_: *mut avro_raw_string_t,
        src: *const ::std::os::raw::c_void,
        length: size_t,
    );
}
extern "C" {
    pub fn avro_raw_string_set(str_: *mut avro_raw_string_t, src: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn avro_raw_string_append(str_: *mut avro_raw_string_t, src: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn avro_raw_string_append_length(
        str_: *mut avro_raw_string_t,
        src: *const ::std::os::raw::c_void,
        length: size_t,
    );
}
extern "C" {
    pub fn avro_raw_string_give(str_: *mut avro_raw_string_t, src: *mut avro_wrapped_buffer_t);
}
extern "C" {
    pub fn avro_raw_string_grab(
        str_: *const avro_raw_string_t,
        dest: *mut avro_wrapped_buffer_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn avro_raw_string_clear(str_: *mut avro_raw_string_t);
}
extern "C" {
    pub fn avro_raw_string_equals(
        str1: *const avro_raw_string_t,
        str2: *const avro_raw_string_t,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct avro_memoize {
    pub cache: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_avro_memoize() {
    assert_eq!(
        ::std::mem::size_of::<avro_memoize>(),
        8usize,
        concat!("Size of: ", stringify!(avro_memoize))
    );
    assert_eq!(
        ::std::mem::align_of::<avro_memoize>(),
        8usize,
        concat!("Alignment of ", stringify!(avro_memoize))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<avro_memoize>())).cache as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(avro_memoize),
            "::",
            stringify!(cache)
        )
    );
}
pub type avro_memoize_t = avro_memoize;
extern "C" {
    pub fn avro_memoize_init(mem: *mut avro_memoize_t);
}
extern "C" {
    pub fn avro_memoize_done(mem: *mut avro_memoize_t);
}
extern "C" {
    pub fn avro_memoize_get(
        mem: *mut avro_memoize_t,
        key1: *mut ::std::os::raw::c_void,
        key2: *mut ::std::os::raw::c_void,
        result: *mut *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn avro_memoize_set(
        mem: *mut avro_memoize_t,
        key1: *mut ::std::os::raw::c_void,
        key2: *mut ::std::os::raw::c_void,
        result: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn avro_memoize_delete(
        mem: *mut avro_memoize_t,
        key1: *mut ::std::os::raw::c_void,
        key2: *mut ::std::os::raw::c_void,
    );
}
pub type avro_schema_t = *mut avro_obj_t;
extern "C" {
    pub fn avro_schema_string() -> avro_schema_t;
}
extern "C" {
    pub fn avro_schema_bytes() -> avro_schema_t;
}
extern "C" {
    pub fn avro_schema_int() -> avro_schema_t;
}
extern "C" {
    pub fn avro_schema_long() -> avro_schema_t;
}
extern "C" {
    pub fn avro_schema_float() -> avro_schema_t;
}
extern "C" {
    pub fn avro_schema_double() -> avro_schema_t;
}
extern "C" {
    pub fn avro_schema_boolean() -> avro_schema_t;
}
extern "C" {
    pub fn avro_schema_null() -> avro_schema_t;
}
extern "C" {
    pub fn avro_schema_record(
        name: *const ::std::os::raw::c_char,
        space: *const ::std::os::raw::c_char,
    ) -> avro_schema_t;
}
extern "C" {
    pub fn avro_schema_record_field_get(
        record: avro_schema_t,
        field_name: *const ::std::os::raw::c_char,
    ) -> avro_schema_t;
}
extern "C" {
    pub fn avro_schema_record_field_name(
        schema: avro_schema_t,
        index: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn avro_schema_record_field_get_index(
        schema: avro_schema_t,
        field_name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn avro_schema_record_field_get_by_index(
        record: avro_schema_t,
        index: ::std::os::raw::c_int,
    ) -> avro_schema_t;
}
extern "C" {
    pub fn avro_schema_record_field_append(
        record: avro_schema_t,
        field_name: *const ::std::os::raw::c_char,
        type_: avro_schema_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn avro_schema_record_size(record: avro_schema_t) -> size_t;
}
extern "C" {
    pub fn avro_schema_enum(name: *const ::std::os::raw::c_char) -> avro_schema_t;
}
extern "C" {
    pub fn avro_schema_enum_ns(
        name: *const ::std::os::raw::c_char,
        space: *const ::std::os::raw::c_char,
    ) -> avro_schema_t;
}
extern "C" {
    pub fn avro_schema_enum_get(
        enump: avro_schema_t,
        index: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn avro_schema_enum_get_by_name(
        enump: avro_schema_t,
        symbol_name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn avro_schema_enum_symbol_append(
        enump: avro_schema_t,
        symbol: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn avro_schema_enum_number_of_symbols(enump: avro_schema_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn avro_schema_fixed(name: *const ::std::os::raw::c_char, len: i64) -> avro_schema_t;
}
extern "C" {
    pub fn avro_schema_fixed_ns(
        name: *const ::std::os::raw::c_char,
        space: *const ::std::os::raw::c_char,
        len: i64,
    ) -> avro_schema_t;
}
extern "C" {
    pub fn avro_schema_fixed_size(fixed: avro_schema_t) -> i64;
}
extern "C" {
    pub fn avro_schema_map(values: avro_schema_t) -> avro_schema_t;
}
extern "C" {
    pub fn avro_schema_map_values(map: avro_schema_t) -> avro_schema_t;
}
extern "C" {
    pub fn avro_schema_array(items: avro_schema_t) -> avro_schema_t;
}
extern "C" {
    pub fn avro_schema_array_items(array: avro_schema_t) -> avro_schema_t;
}
extern "C" {
    pub fn avro_schema_union() -> avro_schema_t;
}
extern "C" {
    pub fn avro_schema_union_size(union_schema: avro_schema_t) -> size_t;
}
extern "C" {
    pub fn avro_schema_union_append(
        union_schema: avro_schema_t,
        schema: avro_schema_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn avro_schema_union_branch(
        union_schema: avro_schema_t,
        branch_index: ::std::os::raw::c_int,
    ) -> avro_schema_t;
}
extern "C" {
    pub fn avro_schema_union_branch_by_name(
        union_schema: avro_schema_t,
        branch_index: *mut ::std::os::raw::c_int,
        name: *const ::std::os::raw::c_char,
    ) -> avro_schema_t;
}
extern "C" {
    pub fn avro_schema_link(schema: avro_schema_t) -> avro_schema_t;
}
extern "C" {
    pub fn avro_schema_link_target(schema: avro_schema_t) -> avro_schema_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct avro_schema_error_t_ {
    _unused: [u8; 0],
}
pub type avro_schema_error_t = *mut avro_schema_error_t_;
extern "C" {
    pub fn avro_schema_from_json(
        jsontext: *const ::std::os::raw::c_char,
        unused1: i32,
        schema: *mut avro_schema_t,
        unused2: *mut avro_schema_error_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn avro_schema_from_json_length(
        jsontext: *const ::std::os::raw::c_char,
        length: size_t,
        schema: *mut avro_schema_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn avro_schema_to_specific(
        schema: avro_schema_t,
        prefix: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn avro_schema_get_subschema(
        schema: avro_schema_t,
        name: *const ::std::os::raw::c_char,
    ) -> avro_schema_t;
}
extern "C" {
    pub fn avro_schema_name(schema: avro_schema_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn avro_schema_namespace(schema: avro_schema_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn avro_schema_type_name(schema: avro_schema_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn avro_schema_copy(schema: avro_schema_t) -> avro_schema_t;
}
extern "C" {
    pub fn avro_schema_equal(a: avro_schema_t, b: avro_schema_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn avro_schema_incref(schema: avro_schema_t) -> avro_schema_t;
}
extern "C" {
    pub fn avro_schema_decref(schema: avro_schema_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn avro_schema_match(
        writers_schema: avro_schema_t,
        readers_schema: avro_schema_t,
    ) -> ::std::os::raw::c_int;
}
pub type avro_value_iface_t = avro_value_iface;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct avro_value {
    pub iface: *mut avro_value_iface_t,
    pub self_: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_avro_value() {
    assert_eq!(
        ::std::mem::size_of::<avro_value>(),
        16usize,
        concat!("Size of: ", stringify!(avro_value))
    );
    assert_eq!(
        ::std::mem::align_of::<avro_value>(),
        8usize,
        concat!("Alignment of ", stringify!(avro_value))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<avro_value>())).iface as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(avro_value),
            "::",
            stringify!(iface)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<avro_value>())).self_ as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(avro_value),
            "::",
            stringify!(self_)
        )
    );
}
pub type avro_value_t = avro_value;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct avro_value_iface {
    pub incref_iface: ::std::option::Option<
        unsafe extern "C" fn(iface: *mut avro_value_iface_t) -> *mut avro_value_iface_t,
    >,
    pub decref_iface: ::std::option::Option<unsafe extern "C" fn(iface: *mut avro_value_iface_t)>,
    pub incref: ::std::option::Option<unsafe extern "C" fn(value: *mut avro_value_t)>,
    pub decref: ::std::option::Option<unsafe extern "C" fn(value: *mut avro_value_t)>,
    pub reset: ::std::option::Option<
        unsafe extern "C" fn(
            iface: *const avro_value_iface_t,
            self_: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_type: ::std::option::Option<
        unsafe extern "C" fn(
            iface: *const avro_value_iface_t,
            self_: *const ::std::os::raw::c_void,
        ) -> avro_type_t,
    >,
    pub get_schema: ::std::option::Option<
        unsafe extern "C" fn(
            iface: *const avro_value_iface_t,
            self_: *const ::std::os::raw::c_void,
        ) -> avro_schema_t,
    >,
    pub get_boolean: ::std::option::Option<
        unsafe extern "C" fn(
            iface: *const avro_value_iface_t,
            self_: *const ::std::os::raw::c_void,
            out: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_bytes: ::std::option::Option<
        unsafe extern "C" fn(
            iface: *const avro_value_iface_t,
            self_: *const ::std::os::raw::c_void,
            buf: *mut *const ::std::os::raw::c_void,
            size: *mut size_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub grab_bytes: ::std::option::Option<
        unsafe extern "C" fn(
            iface: *const avro_value_iface_t,
            self_: *const ::std::os::raw::c_void,
            dest: *mut avro_wrapped_buffer_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_double: ::std::option::Option<
        unsafe extern "C" fn(
            iface: *const avro_value_iface_t,
            self_: *const ::std::os::raw::c_void,
            out: *mut f64,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_float: ::std::option::Option<
        unsafe extern "C" fn(
            iface: *const avro_value_iface_t,
            self_: *const ::std::os::raw::c_void,
            out: *mut f32,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_int: ::std::option::Option<
        unsafe extern "C" fn(
            iface: *const avro_value_iface_t,
            self_: *const ::std::os::raw::c_void,
            out: *mut i32,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_long: ::std::option::Option<
        unsafe extern "C" fn(
            iface: *const avro_value_iface_t,
            self_: *const ::std::os::raw::c_void,
            out: *mut i64,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_null: ::std::option::Option<
        unsafe extern "C" fn(
            iface: *const avro_value_iface_t,
            self_: *const ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_string: ::std::option::Option<
        unsafe extern "C" fn(
            iface: *const avro_value_iface_t,
            self_: *const ::std::os::raw::c_void,
            str_: *mut *const ::std::os::raw::c_char,
            size: *mut size_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub grab_string: ::std::option::Option<
        unsafe extern "C" fn(
            iface: *const avro_value_iface_t,
            self_: *const ::std::os::raw::c_void,
            dest: *mut avro_wrapped_buffer_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_enum: ::std::option::Option<
        unsafe extern "C" fn(
            iface: *const avro_value_iface_t,
            self_: *const ::std::os::raw::c_void,
            out: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_fixed: ::std::option::Option<
        unsafe extern "C" fn(
            iface: *const avro_value_iface_t,
            self_: *const ::std::os::raw::c_void,
            buf: *mut *const ::std::os::raw::c_void,
            size: *mut size_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub grab_fixed: ::std::option::Option<
        unsafe extern "C" fn(
            iface: *const avro_value_iface_t,
            self_: *const ::std::os::raw::c_void,
            dest: *mut avro_wrapped_buffer_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_boolean: ::std::option::Option<
        unsafe extern "C" fn(
            iface: *const avro_value_iface_t,
            self_: *mut ::std::os::raw::c_void,
            val: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_bytes: ::std::option::Option<
        unsafe extern "C" fn(
            iface: *const avro_value_iface_t,
            self_: *mut ::std::os::raw::c_void,
            buf: *mut ::std::os::raw::c_void,
            size: size_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub give_bytes: ::std::option::Option<
        unsafe extern "C" fn(
            iface: *const avro_value_iface_t,
            self_: *mut ::std::os::raw::c_void,
            buf: *mut avro_wrapped_buffer_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_double: ::std::option::Option<
        unsafe extern "C" fn(
            iface: *const avro_value_iface_t,
            self_: *mut ::std::os::raw::c_void,
            val: f64,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_float: ::std::option::Option<
        unsafe extern "C" fn(
            iface: *const avro_value_iface_t,
            self_: *mut ::std::os::raw::c_void,
            val: f32,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_int: ::std::option::Option<
        unsafe extern "C" fn(
            iface: *const avro_value_iface_t,
            self_: *mut ::std::os::raw::c_void,
            val: i32,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_long: ::std::option::Option<
        unsafe extern "C" fn(
            iface: *const avro_value_iface_t,
            self_: *mut ::std::os::raw::c_void,
            val: i64,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_null: ::std::option::Option<
        unsafe extern "C" fn(
            iface: *const avro_value_iface_t,
            self_: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_string: ::std::option::Option<
        unsafe extern "C" fn(
            iface: *const avro_value_iface_t,
            self_: *mut ::std::os::raw::c_void,
            str_: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_string_len: ::std::option::Option<
        unsafe extern "C" fn(
            iface: *const avro_value_iface_t,
            self_: *mut ::std::os::raw::c_void,
            str_: *const ::std::os::raw::c_char,
            size: size_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub give_string_len: ::std::option::Option<
        unsafe extern "C" fn(
            iface: *const avro_value_iface_t,
            self_: *mut ::std::os::raw::c_void,
            buf: *mut avro_wrapped_buffer_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_enum: ::std::option::Option<
        unsafe extern "C" fn(
            iface: *const avro_value_iface_t,
            self_: *mut ::std::os::raw::c_void,
            val: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_fixed: ::std::option::Option<
        unsafe extern "C" fn(
            iface: *const avro_value_iface_t,
            self_: *mut ::std::os::raw::c_void,
            buf: *mut ::std::os::raw::c_void,
            size: size_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub give_fixed: ::std::option::Option<
        unsafe extern "C" fn(
            iface: *const avro_value_iface_t,
            self_: *mut ::std::os::raw::c_void,
            buf: *mut avro_wrapped_buffer_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_size: ::std::option::Option<
        unsafe extern "C" fn(
            iface: *const avro_value_iface_t,
            self_: *const ::std::os::raw::c_void,
            size: *mut size_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_by_index: ::std::option::Option<
        unsafe extern "C" fn(
            iface: *const avro_value_iface_t,
            self_: *const ::std::os::raw::c_void,
            index: size_t,
            child: *mut avro_value_t,
            name: *mut *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_by_name: ::std::option::Option<
        unsafe extern "C" fn(
            iface: *const avro_value_iface_t,
            self_: *const ::std::os::raw::c_void,
            name: *const ::std::os::raw::c_char,
            child: *mut avro_value_t,
            index: *mut size_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_discriminant: ::std::option::Option<
        unsafe extern "C" fn(
            iface: *const avro_value_iface_t,
            self_: *const ::std::os::raw::c_void,
            out: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_current_branch: ::std::option::Option<
        unsafe extern "C" fn(
            iface: *const avro_value_iface_t,
            self_: *const ::std::os::raw::c_void,
            branch: *mut avro_value_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub append: ::std::option::Option<
        unsafe extern "C" fn(
            iface: *const avro_value_iface_t,
            self_: *mut ::std::os::raw::c_void,
            child_out: *mut avro_value_t,
            new_index: *mut size_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub add: ::std::option::Option<
        unsafe extern "C" fn(
            iface: *const avro_value_iface_t,
            self_: *mut ::std::os::raw::c_void,
            key: *const ::std::os::raw::c_char,
            child: *mut avro_value_t,
            index: *mut size_t,
            is_new: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_branch: ::std::option::Option<
        unsafe extern "C" fn(
            iface: *const avro_value_iface_t,
            self_: *mut ::std::os::raw::c_void,
            discriminant: ::std::os::raw::c_int,
            branch: *mut avro_value_t,
        ) -> ::std::os::raw::c_int,
    >,
}
#[test]
fn bindgen_test_layout_avro_value_iface() {
    assert_eq!(
        ::std::mem::size_of::<avro_value_iface>(),
        336usize,
        concat!("Size of: ", stringify!(avro_value_iface))
    );
    assert_eq!(
        ::std::mem::align_of::<avro_value_iface>(),
        8usize,
        concat!("Alignment of ", stringify!(avro_value_iface))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<avro_value_iface>())).incref_iface as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(avro_value_iface),
            "::",
            stringify!(incref_iface)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<avro_value_iface>())).decref_iface as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(avro_value_iface),
            "::",
            stringify!(decref_iface)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<avro_value_iface>())).incref as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(avro_value_iface),
            "::",
            stringify!(incref)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<avro_value_iface>())).decref as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(avro_value_iface),
            "::",
            stringify!(decref)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<avro_value_iface>())).reset as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(avro_value_iface),
            "::",
            stringify!(reset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<avro_value_iface>())).get_type as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(avro_value_iface),
            "::",
            stringify!(get_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<avro_value_iface>())).get_schema as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(avro_value_iface),
            "::",
            stringify!(get_schema)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<avro_value_iface>())).get_boolean as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(avro_value_iface),
            "::",
            stringify!(get_boolean)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<avro_value_iface>())).get_bytes as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(avro_value_iface),
            "::",
            stringify!(get_bytes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<avro_value_iface>())).grab_bytes as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(avro_value_iface),
            "::",
            stringify!(grab_bytes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<avro_value_iface>())).get_double as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(avro_value_iface),
            "::",
            stringify!(get_double)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<avro_value_iface>())).get_float as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(avro_value_iface),
            "::",
            stringify!(get_float)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<avro_value_iface>())).get_int as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(avro_value_iface),
            "::",
            stringify!(get_int)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<avro_value_iface>())).get_long as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(avro_value_iface),
            "::",
            stringify!(get_long)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<avro_value_iface>())).get_null as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(avro_value_iface),
            "::",
            stringify!(get_null)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<avro_value_iface>())).get_string as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(avro_value_iface),
            "::",
            stringify!(get_string)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<avro_value_iface>())).grab_string as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(avro_value_iface),
            "::",
            stringify!(grab_string)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<avro_value_iface>())).get_enum as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(avro_value_iface),
            "::",
            stringify!(get_enum)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<avro_value_iface>())).get_fixed as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(avro_value_iface),
            "::",
            stringify!(get_fixed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<avro_value_iface>())).grab_fixed as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(avro_value_iface),
            "::",
            stringify!(grab_fixed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<avro_value_iface>())).set_boolean as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(avro_value_iface),
            "::",
            stringify!(set_boolean)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<avro_value_iface>())).set_bytes as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(avro_value_iface),
            "::",
            stringify!(set_bytes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<avro_value_iface>())).give_bytes as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(avro_value_iface),
            "::",
            stringify!(give_bytes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<avro_value_iface>())).set_double as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(avro_value_iface),
            "::",
            stringify!(set_double)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<avro_value_iface>())).set_float as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(avro_value_iface),
            "::",
            stringify!(set_float)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<avro_value_iface>())).set_int as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(avro_value_iface),
            "::",
            stringify!(set_int)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<avro_value_iface>())).set_long as *const _ as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(avro_value_iface),
            "::",
            stringify!(set_long)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<avro_value_iface>())).set_null as *const _ as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(avro_value_iface),
            "::",
            stringify!(set_null)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<avro_value_iface>())).set_string as *const _ as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(avro_value_iface),
            "::",
            stringify!(set_string)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<avro_value_iface>())).set_string_len as *const _ as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(avro_value_iface),
            "::",
            stringify!(set_string_len)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<avro_value_iface>())).give_string_len as *const _ as usize
        },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(avro_value_iface),
            "::",
            stringify!(give_string_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<avro_value_iface>())).set_enum as *const _ as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(avro_value_iface),
            "::",
            stringify!(set_enum)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<avro_value_iface>())).set_fixed as *const _ as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(avro_value_iface),
            "::",
            stringify!(set_fixed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<avro_value_iface>())).give_fixed as *const _ as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(avro_value_iface),
            "::",
            stringify!(give_fixed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<avro_value_iface>())).get_size as *const _ as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(avro_value_iface),
            "::",
            stringify!(get_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<avro_value_iface>())).get_by_index as *const _ as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(avro_value_iface),
            "::",
            stringify!(get_by_index)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<avro_value_iface>())).get_by_name as *const _ as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(avro_value_iface),
            "::",
            stringify!(get_by_name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<avro_value_iface>())).get_discriminant as *const _ as usize
        },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(avro_value_iface),
            "::",
            stringify!(get_discriminant)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<avro_value_iface>())).get_current_branch as *const _ as usize
        },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(avro_value_iface),
            "::",
            stringify!(get_current_branch)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<avro_value_iface>())).append as *const _ as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(avro_value_iface),
            "::",
            stringify!(append)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<avro_value_iface>())).add as *const _ as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(avro_value_iface),
            "::",
            stringify!(add)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<avro_value_iface>())).set_branch as *const _ as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(avro_value_iface),
            "::",
            stringify!(set_branch)
        )
    );
}
extern "C" {
    pub fn avro_value_incref(value: *mut avro_value_t);
}
extern "C" {
    pub fn avro_value_decref(value: *mut avro_value_t);
}
extern "C" {
    pub fn avro_value_copy_ref(dest: *mut avro_value_t, src: *const avro_value_t);
}
extern "C" {
    pub fn avro_value_move_ref(dest: *mut avro_value_t, src: *mut avro_value_t);
}
extern "C" {
    pub fn avro_value_equal(
        val1: *mut avro_value_t,
        val2: *mut avro_value_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn avro_value_equal_fast(
        val1: *mut avro_value_t,
        val2: *mut avro_value_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn avro_value_cmp(
        val1: *mut avro_value_t,
        val2: *mut avro_value_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn avro_value_cmp_fast(
        val1: *mut avro_value_t,
        val2: *mut avro_value_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn avro_value_copy(
        dest: *mut avro_value_t,
        src: *const avro_value_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn avro_value_copy_fast(
        dest: *mut avro_value_t,
        src: *const avro_value_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn avro_value_hash(value: *mut avro_value_t) -> u32;
}
extern "C" {
    pub fn avro_value_to_json(
        value: *const avro_value_t,
        one_line: ::std::os::raw::c_int,
        json_str: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
pub type avro_free_func_t =
    ::std::option::Option<unsafe extern "C" fn(ptr: *mut ::std::os::raw::c_void, sz: size_t)>;
extern "C" {
    pub fn avro_alloc_free_func(ptr: *mut ::std::os::raw::c_void, sz: size_t);
}
pub type avro_datum_t = *mut avro_obj_t;
extern "C" {
    pub fn avro_string(str_: *const ::std::os::raw::c_char) -> avro_datum_t;
}
extern "C" {
    pub fn avro_givestring(
        str_: *const ::std::os::raw::c_char,
        free: avro_free_func_t,
    ) -> avro_datum_t;
}
extern "C" {
    pub fn avro_bytes(buf: *const ::std::os::raw::c_char, len: i64) -> avro_datum_t;
}
extern "C" {
    pub fn avro_givebytes(
        buf: *const ::std::os::raw::c_char,
        len: i64,
        free: avro_free_func_t,
    ) -> avro_datum_t;
}
extern "C" {
    pub fn avro_int32(i: i32) -> avro_datum_t;
}
extern "C" {
    pub fn avro_int64(l: i64) -> avro_datum_t;
}
extern "C" {
    pub fn avro_float(f: f32) -> avro_datum_t;
}
extern "C" {
    pub fn avro_double(d: f64) -> avro_datum_t;
}
extern "C" {
    pub fn avro_boolean(i: i8) -> avro_datum_t;
}
extern "C" {
    pub fn avro_null() -> avro_datum_t;
}
extern "C" {
    pub fn avro_record(schema: avro_schema_t) -> avro_datum_t;
}
extern "C" {
    pub fn avro_enum(schema: avro_schema_t, i: ::std::os::raw::c_int) -> avro_datum_t;
}
extern "C" {
    pub fn avro_fixed(
        schema: avro_schema_t,
        bytes: *const ::std::os::raw::c_char,
        size: i64,
    ) -> avro_datum_t;
}
extern "C" {
    pub fn avro_givefixed(
        schema: avro_schema_t,
        bytes: *const ::std::os::raw::c_char,
        size: i64,
        free: avro_free_func_t,
    ) -> avro_datum_t;
}
extern "C" {
    pub fn avro_map(schema: avro_schema_t) -> avro_datum_t;
}
extern "C" {
    pub fn avro_array(schema: avro_schema_t) -> avro_datum_t;
}
extern "C" {
    pub fn avro_union(
        schema: avro_schema_t,
        discriminant: i64,
        datum: avro_datum_t,
    ) -> avro_datum_t;
}
extern "C" {
    pub fn avro_datum_get_schema(datum: avro_datum_t) -> avro_schema_t;
}
extern "C" {
    pub fn avro_datum_from_schema(schema: avro_schema_t) -> avro_datum_t;
}
extern "C" {
    pub fn avro_string_get(
        datum: avro_datum_t,
        p: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn avro_bytes_get(
        datum: avro_datum_t,
        bytes: *mut *mut ::std::os::raw::c_char,
        size: *mut i64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn avro_int32_get(datum: avro_datum_t, i: *mut i32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn avro_int64_get(datum: avro_datum_t, l: *mut i64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn avro_float_get(datum: avro_datum_t, f: *mut f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn avro_double_get(datum: avro_datum_t, d: *mut f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn avro_boolean_get(datum: avro_datum_t, i: *mut i8) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn avro_enum_get(datum: avro_datum_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn avro_enum_get_name(datum: avro_datum_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn avro_fixed_get(
        datum: avro_datum_t,
        bytes: *mut *mut ::std::os::raw::c_char,
        size: *mut i64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn avro_record_get(
        record: avro_datum_t,
        field_name: *const ::std::os::raw::c_char,
        value: *mut avro_datum_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn avro_map_get(
        datum: avro_datum_t,
        key: *const ::std::os::raw::c_char,
        value: *mut avro_datum_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn avro_map_get_key(
        datum: avro_datum_t,
        index: ::std::os::raw::c_int,
        key: *mut *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn avro_map_get_index(
        datum: avro_datum_t,
        key: *const ::std::os::raw::c_char,
        index: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn avro_map_size(datum: avro_datum_t) -> size_t;
}
extern "C" {
    pub fn avro_array_get(
        datum: avro_datum_t,
        index: i64,
        value: *mut avro_datum_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn avro_array_size(datum: avro_datum_t) -> size_t;
}
extern "C" {
    pub fn avro_union_discriminant(datum: avro_datum_t) -> i64;
}
extern "C" {
    pub fn avro_union_current_branch(datum: avro_datum_t) -> avro_datum_t;
}
extern "C" {
    pub fn avro_string_set(
        datum: avro_datum_t,
        p: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn avro_givestring_set(
        datum: avro_datum_t,
        p: *const ::std::os::raw::c_char,
        free: avro_free_func_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn avro_bytes_set(
        datum: avro_datum_t,
        bytes: *const ::std::os::raw::c_char,
        size: i64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn avro_givebytes_set(
        datum: avro_datum_t,
        bytes: *const ::std::os::raw::c_char,
        size: i64,
        free: avro_free_func_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn avro_int32_set(datum: avro_datum_t, i: i32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn avro_int64_set(datum: avro_datum_t, l: i64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn avro_float_set(datum: avro_datum_t, f: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn avro_double_set(datum: avro_datum_t, d: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn avro_boolean_set(datum: avro_datum_t, i: i8) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn avro_enum_set(
        datum: avro_datum_t,
        symbol_value: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn avro_enum_set_name(
        datum: avro_datum_t,
        symbol_name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn avro_fixed_set(
        datum: avro_datum_t,
        bytes: *const ::std::os::raw::c_char,
        size: i64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn avro_givefixed_set(
        datum: avro_datum_t,
        bytes: *const ::std::os::raw::c_char,
        size: i64,
        free: avro_free_func_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn avro_record_set(
        record: avro_datum_t,
        field_name: *const ::std::os::raw::c_char,
        value: avro_datum_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn avro_map_set(
        map: avro_datum_t,
        key: *const ::std::os::raw::c_char,
        value: avro_datum_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn avro_array_append_datum(
        array_datum: avro_datum_t,
        datum: avro_datum_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn avro_union_set_discriminant(
        unionp: avro_datum_t,
        discriminant: ::std::os::raw::c_int,
        branch: *mut avro_datum_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn avro_datum_reset(value: avro_datum_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn avro_datum_incref(value: avro_datum_t) -> avro_datum_t;
}
extern "C" {
    pub fn avro_datum_decref(value: avro_datum_t);
}
extern "C" {
    pub fn avro_datum_print(value: avro_datum_t, fp: *mut FILE);
}
extern "C" {
    pub fn avro_datum_equal(a: avro_datum_t, b: avro_datum_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn avro_datum_to_json(
        datum: avro_datum_t,
        one_line: ::std::os::raw::c_int,
        json_str: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn avro_schema_datum_validate(
        expected_schema: avro_schema_t,
        datum: avro_datum_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn avro_datum_class() -> *mut avro_value_iface_t;
}
extern "C" {
    pub fn avro_datum_as_value(
        value: *mut avro_value_t,
        src: avro_datum_t,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct avro_reader_t_ {
    _unused: [u8; 0],
}
pub type avro_reader_t = *mut avro_reader_t_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct avro_writer_t_ {
    _unused: [u8; 0],
}
pub type avro_writer_t = *mut avro_writer_t_;
extern "C" {
    pub fn avro_reader_file(fp: *mut FILE) -> avro_reader_t;
}
extern "C" {
    pub fn avro_reader_file_fp(fp: *mut FILE, should_close: ::std::os::raw::c_int)
        -> avro_reader_t;
}
extern "C" {
    pub fn avro_writer_file(fp: *mut FILE) -> avro_writer_t;
}
extern "C" {
    pub fn avro_writer_file_fp(fp: *mut FILE, should_close: ::std::os::raw::c_int)
        -> avro_writer_t;
}
extern "C" {
    pub fn avro_reader_memory(buf: *const ::std::os::raw::c_char, len: i64) -> avro_reader_t;
}
extern "C" {
    pub fn avro_writer_memory(buf: *const ::std::os::raw::c_char, len: i64) -> avro_writer_t;
}
extern "C" {
    pub fn avro_reader_memory_set_source(
        reader: avro_reader_t,
        buf: *const ::std::os::raw::c_char,
        len: i64,
    );
}
extern "C" {
    pub fn avro_writer_memory_set_dest(
        writer: avro_writer_t,
        buf: *const ::std::os::raw::c_char,
        len: i64,
    );
}
extern "C" {
    pub fn avro_read(
        reader: avro_reader_t,
        buf: *mut ::std::os::raw::c_void,
        len: i64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn avro_skip(reader: avro_reader_t, len: i64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn avro_write(
        writer: avro_writer_t,
        buf: *mut ::std::os::raw::c_void,
        len: i64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn avro_reader_reset(reader: avro_reader_t);
}
extern "C" {
    pub fn avro_writer_reset(writer: avro_writer_t);
}
extern "C" {
    pub fn avro_writer_tell(writer: avro_writer_t) -> i64;
}
extern "C" {
    pub fn avro_writer_flush(writer: avro_writer_t);
}
extern "C" {
    pub fn avro_writer_dump(writer: avro_writer_t, fp: *mut FILE);
}
extern "C" {
    pub fn avro_reader_dump(reader: avro_reader_t, fp: *mut FILE);
}
extern "C" {
    pub fn avro_reader_is_eof(reader: avro_reader_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn avro_reader_free(reader: avro_reader_t);
}
extern "C" {
    pub fn avro_writer_free(writer: avro_writer_t);
}
extern "C" {
    pub fn avro_schema_to_json(schema: avro_schema_t, out: avro_writer_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn avro_value_read(reader: avro_reader_t, dest: *mut avro_value_t)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn avro_value_write(writer: avro_writer_t, src: *mut avro_value_t)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn avro_value_sizeof(src: *mut avro_value_t, size: *mut size_t) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct avro_file_reader_t_ {
    _unused: [u8; 0],
}
pub type avro_file_reader_t = *mut avro_file_reader_t_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct avro_file_writer_t_ {
    _unused: [u8; 0],
}
pub type avro_file_writer_t = *mut avro_file_writer_t_;
extern "C" {
    pub fn avro_file_writer_create(
        path: *const ::std::os::raw::c_char,
        schema: avro_schema_t,
        writer: *mut avro_file_writer_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn avro_file_writer_create_fp(
        fp: *mut FILE,
        path: *const ::std::os::raw::c_char,
        should_close: ::std::os::raw::c_int,
        schema: avro_schema_t,
        writer: *mut avro_file_writer_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn avro_file_writer_create_with_codec(
        path: *const ::std::os::raw::c_char,
        schema: avro_schema_t,
        writer: *mut avro_file_writer_t,
        codec: *const ::std::os::raw::c_char,
        block_size: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn avro_file_writer_create_with_codec_fp(
        fp: *mut FILE,
        path: *const ::std::os::raw::c_char,
        should_close: ::std::os::raw::c_int,
        schema: avro_schema_t,
        writer: *mut avro_file_writer_t,
        codec: *const ::std::os::raw::c_char,
        block_size: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn avro_file_writer_open(
        path: *const ::std::os::raw::c_char,
        writer: *mut avro_file_writer_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn avro_file_writer_open_bs(
        path: *const ::std::os::raw::c_char,
        writer: *mut avro_file_writer_t,
        block_size: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn avro_file_reader(
        path: *const ::std::os::raw::c_char,
        reader: *mut avro_file_reader_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn avro_file_reader_fp(
        fp: *mut FILE,
        path: *const ::std::os::raw::c_char,
        should_close: ::std::os::raw::c_int,
        reader: *mut avro_file_reader_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn avro_file_reader_get_writer_schema(reader: avro_file_reader_t) -> avro_schema_t;
}
extern "C" {
    pub fn avro_file_writer_sync(writer: avro_file_writer_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn avro_file_writer_flush(writer: avro_file_writer_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn avro_file_writer_close(writer: avro_file_writer_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn avro_file_reader_close(reader: avro_file_reader_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn avro_file_reader_read_value(
        reader: avro_file_reader_t,
        dest: *mut avro_value_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn avro_file_writer_append_value(
        writer: avro_file_writer_t,
        src: *mut avro_value_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn avro_file_writer_append_encoded(
        writer: avro_file_writer_t,
        buf: *const ::std::os::raw::c_void,
        len: i64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn avro_read_data(
        reader: avro_reader_t,
        writer_schema: avro_schema_t,
        reader_schema: avro_schema_t,
        datum: *mut avro_datum_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn avro_skip_data(
        reader: avro_reader_t,
        writer_schema: avro_schema_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn avro_write_data(
        writer: avro_writer_t,
        writer_schema: avro_schema_t,
        datum: avro_datum_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn avro_size_data(
        writer: avro_writer_t,
        writer_schema: avro_schema_t,
        datum: avro_datum_t,
    ) -> i64;
}
extern "C" {
    pub fn avro_file_writer_append(
        writer: avro_file_writer_t,
        datum: avro_datum_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn avro_file_reader_read(
        reader: avro_file_reader_t,
        readers_schema: avro_schema_t,
        datum: *mut avro_datum_t,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct avro_consumer_t {
    pub schema: avro_schema_t,
    pub free: ::std::option::Option<unsafe extern "C" fn(consumer: *mut avro_consumer_t)>,
    pub boolean_value: ::std::option::Option<
        unsafe extern "C" fn(
            consumer: *mut avro_consumer_t,
            value: ::std::os::raw::c_int,
            user_data: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub bytes_value: ::std::option::Option<
        unsafe extern "C" fn(
            consumer: *mut avro_consumer_t,
            value: *const ::std::os::raw::c_void,
            value_len: size_t,
            user_data: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub double_value: ::std::option::Option<
        unsafe extern "C" fn(
            consumer: *mut avro_consumer_t,
            value: f64,
            user_data: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub float_value: ::std::option::Option<
        unsafe extern "C" fn(
            consumer: *mut avro_consumer_t,
            value: f32,
            user_data: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub int_value: ::std::option::Option<
        unsafe extern "C" fn(
            consumer: *mut avro_consumer_t,
            value: i32,
            user_data: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub long_value: ::std::option::Option<
        unsafe extern "C" fn(
            consumer: *mut avro_consumer_t,
            value: i64,
            user_data: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub null_value: ::std::option::Option<
        unsafe extern "C" fn(
            consumer: *mut avro_consumer_t,
            user_data: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub string_value: ::std::option::Option<
        unsafe extern "C" fn(
            consumer: *mut avro_consumer_t,
            value: *const ::std::os::raw::c_void,
            value_len: size_t,
            user_data: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub array_start_block: ::std::option::Option<
        unsafe extern "C" fn(
            consumer: *mut avro_consumer_t,
            is_first_block: ::std::os::raw::c_int,
            block_count: ::std::os::raw::c_uint,
            user_data: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub array_element: ::std::option::Option<
        unsafe extern "C" fn(
            consumer: *mut avro_consumer_t,
            index: ::std::os::raw::c_uint,
            element_consumer: *mut *mut avro_consumer_t,
            element_user_data: *mut *mut ::std::os::raw::c_void,
            user_data: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub enum_value: ::std::option::Option<
        unsafe extern "C" fn(
            consumer: *mut avro_consumer_t,
            value: ::std::os::raw::c_int,
            user_data: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub fixed_value: ::std::option::Option<
        unsafe extern "C" fn(
            consumer: *mut avro_consumer_t,
            value: *const ::std::os::raw::c_void,
            value_len: size_t,
            user_data: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub map_start_block: ::std::option::Option<
        unsafe extern "C" fn(
            consumer: *mut avro_consumer_t,
            is_first_block: ::std::os::raw::c_int,
            block_count: ::std::os::raw::c_uint,
            user_data: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub map_element: ::std::option::Option<
        unsafe extern "C" fn(
            consumer: *mut avro_consumer_t,
            index: ::std::os::raw::c_uint,
            key: *const ::std::os::raw::c_char,
            value_consumer: *mut *mut avro_consumer_t,
            value_user_data: *mut *mut ::std::os::raw::c_void,
            user_data: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub record_start: ::std::option::Option<
        unsafe extern "C" fn(
            consumer: *mut avro_consumer_t,
            user_data: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub record_field: ::std::option::Option<
        unsafe extern "C" fn(
            consumer: *mut avro_consumer_t,
            index: ::std::os::raw::c_uint,
            field_consumer: *mut *mut avro_consumer_t,
            field_user_data: *mut *mut ::std::os::raw::c_void,
            user_data: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub union_branch: ::std::option::Option<
        unsafe extern "C" fn(
            consumer: *mut avro_consumer_t,
            discriminant: ::std::os::raw::c_uint,
            branch_consumer: *mut *mut avro_consumer_t,
            branch_user_data: *mut *mut ::std::os::raw::c_void,
            user_data: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
}
#[test]
fn bindgen_test_layout_avro_consumer_t() {
    assert_eq!(
        ::std::mem::size_of::<avro_consumer_t>(),
        152usize,
        concat!("Size of: ", stringify!(avro_consumer_t))
    );
    assert_eq!(
        ::std::mem::align_of::<avro_consumer_t>(),
        8usize,
        concat!("Alignment of ", stringify!(avro_consumer_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<avro_consumer_t>())).schema as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(avro_consumer_t),
            "::",
            stringify!(schema)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<avro_consumer_t>())).free as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(avro_consumer_t),
            "::",
            stringify!(free)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<avro_consumer_t>())).boolean_value as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(avro_consumer_t),
            "::",
            stringify!(boolean_value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<avro_consumer_t>())).bytes_value as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(avro_consumer_t),
            "::",
            stringify!(bytes_value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<avro_consumer_t>())).double_value as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(avro_consumer_t),
            "::",
            stringify!(double_value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<avro_consumer_t>())).float_value as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(avro_consumer_t),
            "::",
            stringify!(float_value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<avro_consumer_t>())).int_value as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(avro_consumer_t),
            "::",
            stringify!(int_value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<avro_consumer_t>())).long_value as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(avro_consumer_t),
            "::",
            stringify!(long_value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<avro_consumer_t>())).null_value as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(avro_consumer_t),
            "::",
            stringify!(null_value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<avro_consumer_t>())).string_value as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(avro_consumer_t),
            "::",
            stringify!(string_value)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<avro_consumer_t>())).array_start_block as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(avro_consumer_t),
            "::",
            stringify!(array_start_block)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<avro_consumer_t>())).array_element as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(avro_consumer_t),
            "::",
            stringify!(array_element)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<avro_consumer_t>())).enum_value as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(avro_consumer_t),
            "::",
            stringify!(enum_value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<avro_consumer_t>())).fixed_value as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(avro_consumer_t),
            "::",
            stringify!(fixed_value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<avro_consumer_t>())).map_start_block as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(avro_consumer_t),
            "::",
            stringify!(map_start_block)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<avro_consumer_t>())).map_element as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(avro_consumer_t),
            "::",
            stringify!(map_element)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<avro_consumer_t>())).record_start as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(avro_consumer_t),
            "::",
            stringify!(record_start)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<avro_consumer_t>())).record_field as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(avro_consumer_t),
            "::",
            stringify!(record_field)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<avro_consumer_t>())).union_branch as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(avro_consumer_t),
            "::",
            stringify!(union_branch)
        )
    );
}
extern "C" {
    pub fn avro_consumer_free(consumer: *mut avro_consumer_t);
}
extern "C" {
    pub fn avro_resolver_new(
        writer_schema: avro_schema_t,
        reader_schema: avro_schema_t,
    ) -> *mut avro_consumer_t;
}
extern "C" {
    pub fn avro_consume_binary(
        reader: avro_reader_t,
        consumer: *mut avro_consumer_t,
        ud: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn avro_strerror() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn avro_set_error(fmt: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn avro_prefix_error(fmt: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn avro_generic_class_from_schema(schema: avro_schema_t) -> *mut avro_value_iface_t;
}
extern "C" {
    pub fn avro_generic_value_new(
        iface: *mut avro_value_iface_t,
        dest: *mut avro_value_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn avro_generic_boolean_class() -> *mut avro_value_iface_t;
}
extern "C" {
    pub fn avro_generic_bytes_class() -> *mut avro_value_iface_t;
}
extern "C" {
    pub fn avro_generic_double_class() -> *mut avro_value_iface_t;
}
extern "C" {
    pub fn avro_generic_float_class() -> *mut avro_value_iface_t;
}
extern "C" {
    pub fn avro_generic_int_class() -> *mut avro_value_iface_t;
}
extern "C" {
    pub fn avro_generic_long_class() -> *mut avro_value_iface_t;
}
extern "C" {
    pub fn avro_generic_null_class() -> *mut avro_value_iface_t;
}
extern "C" {
    pub fn avro_generic_string_class() -> *mut avro_value_iface_t;
}
extern "C" {
    pub fn avro_generic_boolean_new(
        value: *mut avro_value_t,
        val: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn avro_generic_bytes_new(
        value: *mut avro_value_t,
        buf: *mut ::std::os::raw::c_void,
        size: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn avro_generic_double_new(value: *mut avro_value_t, val: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn avro_generic_float_new(value: *mut avro_value_t, val: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn avro_generic_int_new(value: *mut avro_value_t, val: i32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn avro_generic_long_new(value: *mut avro_value_t, val: i64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn avro_generic_null_new(value: *mut avro_value_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn avro_generic_string_new(
        value: *mut avro_value_t,
        val: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn avro_generic_string_new_length(
        value: *mut avro_value_t,
        val: *const ::std::os::raw::c_char,
        size: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn avro_resolved_writer_new(
        writer_schema: avro_schema_t,
        reader_schema: avro_schema_t,
    ) -> *mut avro_value_iface_t;
}
extern "C" {
    pub fn avro_resolved_writer_new_value(
        iface: *mut avro_value_iface_t,
        value: *mut avro_value_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn avro_resolved_writer_set_dest(resolved: *mut avro_value_t, dest: *mut avro_value_t);
}
extern "C" {
    pub fn avro_resolved_writer_clear_dest(resolved: *mut avro_value_t);
}
extern "C" {
    pub fn avro_resolved_reader_new(
        writer_schema: avro_schema_t,
        reader_schema: avro_schema_t,
    ) -> *mut avro_value_iface_t;
}
extern "C" {
    pub fn avro_resolved_reader_new_value(
        iface: *mut avro_value_iface_t,
        value: *mut avro_value_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn avro_resolved_reader_set_source(resolved: *mut avro_value_t, dest: *mut avro_value_t);
}
extern "C" {
    pub fn avro_resolved_reader_clear_source(resolved: *mut avro_value_t);
}
